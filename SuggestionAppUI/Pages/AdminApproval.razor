@page "/AdminApproval"
@attribute [Authorize(Policy = "Admin")]
@inject IUserData userData
@inject ISuggestionData suggestionData
@inject NavigationManager navManager

<h1 class="page-heading text-uppercase mb-4">Pending Submissions</h1>
<div class="row">
    <div class="suggestions-count col-8 mt-2">@_submissions?.Count Submissions</div>
    <div class="col-4 close-button-section">
            <button class="btn btn-close" @onclick="ClosePage"></button>
    </div>
</div>

@if (_submissions != null)
{
    @foreach (var s in _submissions)
    {
        <div class="row submittion">
            <div class="col-lg-2 col-md-3 col-sm-4">
                <button class="btn btn-approve" @onclick="(() => ApproveSubmission(s))">Approve</button>
                <button class="btn btn-reject" @onclick="(() => RejectSubmission(s))">Reject</button>
            </div>
            <div class="col-lg-10 col-md-9 col-sm-8">
                <div>
                    @if (_currentEditingTitle == s.Id)
                    {
                        <EditForm class="approval-edit-form" Model="@_editedTitle" OnSubmit="(() => SaveTitle(s))">
                            <InputText class="form-control approval-edit-field" @bind-Value="_editedTitle" />
                            <button class="btn" type="submit">
                                <span class="oi oi-check submittion-edit-approve"></span>
                            </button>
                            <button type="button" class="btn" @onclick="(() => _currentEditingTitle = string.Empty)">
                                <span class="oi oi-x submittion-edit-reject"></span>
                            </button>
                        </EditForm>
                    }
                    else
                    {
                        @s.Suggestion
                        <span class="oi oi-pencil submittion-edit-icon" @onclick="(() => EditTitle(s))"></span>
                    }
                </div>
                <div>
                    @s.Category.CategoryName
                </div>
                <div>
                    @s.Author.DisplayName
                </div>
                <div>
                    @if (_currentEditingDescription == s.Id)
                    {
                        <EditForm class="approval-edit-form" Model="@_editedDescription" OnSubmit="(() => SaveDescription(s))">
                            <InputText class="form-control approval-edit-field" @bind-Value="_editedDescription" />
                            <button class="btn" type="submit">
                                <span class="oi oi-check submittion-edit-approve"></span>
                            </button>
                            <button type="button" class="btn" @onclick="(() => _currentEditingDescription = string.Empty)">
                                <span class="oi oi-x submittion-edit-reject"></span>
                            </button>
                        </EditForm>
                    }
                    else
                    {
                        @s.Description
                        <span class="oi oi-pencil submittion-edit-icon" @onclick="(() => EditDescription(s))"></span>
                    }
                </div>
            </div>
        </div>
    }
}

@code {
    private List<SuggestionModel> _submissions;
    private SuggestionModel _editingModel;
    private string _currentEditingTitle = string.Empty;
    private string _editedTitle = string.Empty;
    private string _currentEditingDescription = string.Empty;
    private string _editedDescription = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _submissions = await suggestionData.GetAllSuggestionWaitingForApproval();
    }

    private async Task ApproveSubmission(SuggestionModel submission)
    {
        submission.ApprovedForRelease = true;
        _submissions.Remove(submission);
        await suggestionData.UpdateSuggestion(submission);
    }

    private async Task RejectSubmission(SuggestionModel submission)
    {
        submission.Rejected = true;
        _submissions.Remove(submission);
        await suggestionData.UpdateSuggestion(submission);
    }

    private void EditTitle(SuggestionModel model)
    {
        _editingModel = model;
        _editedTitle = model.Suggestion;
        _currentEditingTitle = model.Id;
        _currentEditingDescription = string.Empty;
    }

    private async Task SaveTitle(SuggestionModel model)
    {
        _currentEditingTitle = string.Empty;
        model.Suggestion = _editedTitle;
        await suggestionData.UpdateSuggestion(model); 
    }


    private void EditDescription(SuggestionModel model)
    {
        _editingModel = model;
        _editedDescription = model.Description;
        _currentEditingTitle = string.Empty;
        _currentEditingDescription = model.Id;
    }

    private async Task SaveDescription(SuggestionModel model)
    {
        _currentEditingDescription = string.Empty;
        model.Description = _editedDescription;
        await suggestionData.UpdateSuggestion(model);
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}
