@page "/Details/{id}"
@inject AuthenticationStateProvider authProvider
@inject IUserData userData
@inject ISuggestionData suggestionData
@inject NavigationManager navManager
@inject IStatusData statusData

<h1 class="page-heading text-uppercase mb-4">Suggestion Details</h1>

<div class="row justify-content-center detail-form">
    <div class="col-xl-8 col-lg-10 form-layout">
        @if (_suggestion != null )
        {
            <div class="row suggestion-detail-row">
                <div class="col-11 suggestion-detail">
                    <div>
                        <div class="@GetVoteClass()" @onclick="VoteUp">
                            <div class="text-uppercase">@GetUpvoteTopText()</div>
                            <span class="oi oi-caret-top detail-upvote"></span>
                            <div class="text-uppercase">@GetUpvoteBottomText()</div>
                        </div>
                        <div class="suggestion-detail-date">
                            <div>@_suggestion.DateCreated.ToString("MM.dd.yyyy")</div>
                        </div>
                    </div>
                        <div class="suggestion-detail-text">
                        <div class="fw-bold mb-2 suggestion-detail-suggestion">@_suggestion.Suggestion</div>
                        <div class="mb-2 suggestion-detail-author">@_suggestion.Author.DisplayName</div>
                        <div class="mb-2">@_suggestion.Description</div>
                        <div class="suggestion-entry-text-category">
                            @_suggestion.Category.CategoryName
                       </div>
                </div>
                </div>
                <div class="col-1 close-button-section">
                    <button class="btn btn-close" @onclick="ClosePage"></button>
                </div>
            </div>
        }
    </div>
</div>

@if (_suggestion?.SuggestionStatus != null)
{
    <div class="row justify-content-center detail-form">
        <div class="col-xl-8 col-lg-10 suggestion-results form-layout">
            <div class="@GetStatusClass()"></div>
            <div class="suggestion-detail-status-section">
                <div class="suggestion-detail-status fw-bold mb-2 suggestion-detail-suggestion">
                    @_suggestion.SuggestionStatus.StatusName
                </div>
                <div class="suggestion-detail-owner-notes">
                    @((MarkupString)_suggestion.OwnerNotes)
                </div>
            </div>
        </div>
    </div>
}

@if (_suggestion != null)
{
    <AuthorizeView Policy="Admin">
        <div class="row justify-content-center detail-form">
            <div class="col-xl-8 col-lg-10 form-layout admin-details">
                <div>
                    <div class="suggestion-detail-status fw-bold mb-2 suggestion-detail-suggestion">
                        Set Status
                    </div>
                    @if (string.IsNullOrWhiteSpace(_settingStatus))
                    {
                        <div class="admin-set-statuses">
                            <button @onclick="@(() => _settingStatus = "completed")" class="btn suggestion-entry-text-category btn-archive btn-status-completed">completed</button>
                            <button @onclick="@(() => _settingStatus = "watching")" class="btn suggestion-entry-text-category btn-archive btn-status-watching">watching</button>
                            <button @onclick="@(() => _settingStatus = "upcoming")" class="btn suggestion-entry-text-category btn-archive btn-status-upcoming">upcoming</button>
                            <button @onclick="@(() => _settingStatus = "dismissed")" class="btn suggestion-entry-text-category btn-archive btn-status-dismissed">dismissed</button>
                        </div>
                    }
                    else if (_settingStatus == "completed")
                    {
                        <div>
                            <input @bind="_urlText" class="form-control rounded-control" type="text" placeholder="Url" aria-label="Content Url" />
                        </div>
                        <div class="suggestion-entry-bottom">
                            <button class="bth btn-archive btn-archive-confirm" @onclick="CompleteSetStatus">
                                confirm
                            </button>
                            <button class="bth btn-archive btn-archive-reject" @onclick="(() => _settingStatus = null)">
                                cancel
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="suggestion-entry-bottom">
                            <button class="bth btn-archive btn-archive-confirm" @onclick="CompleteSetStatus">
                                confirm
                            </button>
                            <button class="bth btn-archive btn-archive-reject" @onclick="(() => _settingStatus = null)">
                                cancel
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </AuthorizeView>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private SuggestionModel _suggestion;
    private UserModel _loggedInUser;
    private List<StatusModel> _statuses;
    private string _settingStatus = string.Empty;
    private string _urlText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _suggestion = await suggestionData.GetSuggestion(Id);
        _loggedInUser = await authProvider.GetUserFromAuth(userData);
        _statuses = await statusData.GetAllStatuses();
    }

    private async Task CompleteSetStatus()
    {
        switch (_settingStatus)
        {
            case "completed":
                if (string.IsNullOrWhiteSpace(_urlText))
                {
                    return;
                }
                _suggestion.SuggestionStatus = _statuses.Where(s => s.StatusName.ToLower() == _settingStatus.ToLower()).First();
                _suggestion.OwnerNotes = $"You are right, this is an important topic for developers. We create a resource about it here: <a href='{_urlText}' target='_blank'>{_urlText}</a>";
                break;
            case "watching":
                _suggestion.SuggestionStatus = _statuses.Where(s => s.StatusName.ToLower() == _settingStatus.ToLower()).First();
                _suggestion.OwnerNotes = "We noticed the interest this suggestion is getting! If more people are interested we may address this topic in an upcoming resource";
                break;
            case "upcoming":
                _suggestion.SuggestionStatus = _statuses.Where(s => s.StatusName.ToLower() == _settingStatus.ToLower()).First();
                _suggestion.OwnerNotes = "Great suggestion! We have a resource in a pipeline to adress this topic.";
                break;
            case "dismissed":
                _suggestion.SuggestionStatus = _statuses.Where(s => s.StatusName.ToLower() == _settingStatus.ToLower()).First();
                _suggestion.OwnerNotes = "Sometimes a good idea doesn't fit within our scope and vision. This is one of those ideas.";
                break;
            default:
                return;
        }
        _settingStatus = null;
        await suggestionData.UpdateSuggestion(_suggestion);
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
    private string GetUpvoteTopText()
    {
        if (_suggestion.UserVotes.Count > 0)
        {
            return _suggestion.UserVotes?.Count.ToString("00");
        }
        else
        {
            if (_suggestion.Author.Id == _loggedInUser?.Id)
            {
                return "Awaiting";
            }
            else
            {
                return "Click To";
            }
        }
    }
    private string GetUpvoteBottomText()
    {
        if (_suggestion.UserVotes?.Count > 1)
        {
            return "Upvotes";
        }

        return "Upvote";
    }
    private async Task VoteUp()
    {
        if (_loggedInUser != null)
        {
            if (_suggestion.Author.Id == _loggedInUser.Id)
            {
                // Can`t vote on you own suggestion
                return;
            }
            if (!_suggestion.UserVotes.Add(_loggedInUser.Id))
            {
                _suggestion.UserVotes.Remove(_loggedInUser.Id);
            }

            await suggestionData.UpvoteSuggestion(_suggestion.Id, _loggedInUser.Id);
        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }
    private string GetVoteClass()
    {
        if (_suggestion.UserVotes == null || _suggestion.UserVotes.Count == 0)
        {

            return "suggestion-detail-no-votes";
        }

        else if (_suggestion.UserVotes.Contains(_loggedInUser?.Id))
        {
            return "suggestion-detail-voted";
        }
        else
        {
            return "suggestion-detail-not-voted";
        }
    }
    private string GetStatusClass()
    {
        if (_suggestion.SuggestionStatus == null | _suggestion == null)
        {
            return "suggestion-detail-status-none";
        }

        var output = _suggestion?.SuggestionStatus.StatusName switch
        {
            "Completed" => "suggestion-detail-status-completed",
            "Watching" => "suggestion-detail-status-watching",
            "Upcoming" => "suggestion-detail-status-upcoming",
            "Dismissed" => "suggestion-detail-status-dismissed",
            _ => "suggestion-detail-status-none",
        };

        return output;
    }
}