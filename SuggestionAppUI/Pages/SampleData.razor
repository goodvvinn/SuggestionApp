@page "/SampleData"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
@inject ISuggestionData suggestionData

<h3>Sample Data</h3>

@if(categoriesCreated)
{
    <h4> Categories have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateCategories">Create Categories</button>
}

@if(statusesCreated)
{
    <h4> Statuses have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateStatuses">Create Statuses</button>
}

<button class="btn btn-primary" @onclick="GenerateSampleData">Generate Sample Data</button>

@code {

    private bool categoriesCreated = false;
    private bool statusesCreated = false;

    private async Task GenerateSampleData()
    {
        UserModel user = new()
            {
                FirstName = "Test",
                LastName = "T",
                DisplayName = "testUser",
                EmailAdress = "test@t.co",
                ObjectIdentifier = "abc-123",
            };

        await userData.CreateUser(user);

        var foundUser = await userData.GetUserFromAuthentication("abc-123");
        var categories = await categoryData.GetAllCategories();
        var statuses = await statusData.GetAllStatuses();

        HashSet<string> votes = new();
        votes.Add("1");
        votes.Add("2");
        votes.Add("3");
        votes.Add("4");



        SuggestionModel suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[0],
                Suggestion = "First suggestion",
                Description = "This is the first suggestion created by autogenerator",
            };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[1],
                Suggestion = "Second suggestion",
                Description = "This is the second suggestion created by autogenerator",
                SuggestionStatus = statuses[1],
                UserVotes = votes,
                OwnerNotes = "Notes for suggestion"
            };

        await suggestionData.CreateSuggestion(suggestion);
        votes.Add("5");

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[2],
                Suggestion = "Third suggestion",
                Description = "This is the third suggestion created by autogenerator",
                SuggestionStatus = statuses[2],
                UserVotes = votes,
                OwnerNotes = "Notes for suggestion"
            };

        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[1],
                Suggestion = "Fourth suggestion",
                Description = "This is the fourth suggestion created by autogenerator",
                SuggestionStatus = statuses[1],
                OwnerNotes = "Notes for suggestion"
            };

        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[1],
                Suggestion = "Fifth suggestion",
                Description = "This is the fifth suggestion created by autogenerator",
                SuggestionStatus = statuses[0],
                OwnerNotes = "Notes for suggestion"
            };

        await suggestionData.CreateSuggestion(suggestion);
    }
    private async Task CreateCategories()
    {
        var categories = await categoryData.GetAllCategories();
        if(categories?.Count > 0)
        {
            return;            
        }

        CategoryModel cat = new()
            {
                CategoryName = "Courses",
                CategoryDescription = "Full paid courses"
            };

        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Dev Questions",
                CategoryDescription = "Advice on being a developer."
            };

        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "In-Depth Tutorials",
                CategoryDescription = "A deep-dive video on how to use a topic."
            };

        await categoryData.CreateCategory(cat);
        cat = new()
            {
                CategoryName = "10-Minute Training",
                CategoryDescription = "A quick \"How do I use this? \" video."
            };

        await categoryData.CreateCategory(cat);
        cat = new()
            {
                CategoryName = "Other",
                CategoryDescription = "Undefined category "
            };

        await categoryData.CreateCategory(cat);

        categoriesCreated = true;

    }

    private async Task CreateStatuses()
    {

        var statuses = await statusData.GetAllStatuses();
        if (statuses?.Count > 0) return;

        StatusModel stat = new()
            {
                StatusName = "Completed",
                StatusDescription = "The suggestion was accepted and a corresponded item was created"
            };
            await statusData.CreateStatus(stat);

            stat = new()
            {
                StatusName = "Watching",
                StatusDescription = "Interesting suggestion. We are watching how much votes it will collect"
            };
            await statusData.CreateStatus(stat);

            stat = new()
            {
                StatusName = "Upcoming",
                StatusDescription = "The suggestion was accepted and it will be released soon"
            };
            await statusData.CreateStatus(stat);

            stat = new()
            {
                StatusName = "Dismissed",
                StatusDescription = "The suggestion was not something that we are going to undertake"
            };
            await statusData.CreateStatus(stat);

            statusesCreated = true;

    }
}
